# ===========================================
# PROJECT METADATA
# ===========================================
[project]
name = "pl-betting-predictor"
version = "0.1.0"
description = "Premier League match prediction system with EV betting strategy"
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Ammar MSE", email = "ammar@example.com"}
]
keywords = ["machine-learning", "betting", "premier-league", "sports", "prediction"]

# ===========================================
# DÉPENDANCES PRINCIPALES (Production)
# ===========================================
dependencies = [
    # Core ML & Data
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "lightgbm>=4.0.0",
    "xgboost>=2.0.0",
    "joblib>=1.3.0",

    # Data Storage
    "pyarrow>=13.0.0",
    "s3fs>=2023.6.0",
    "boto3>=1.28.0",

    # API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-multipart>=0.0.6",

    # Utils
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "loguru>=0.7.0",

    # Date/Time
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
]

# ===========================================
# DÉPENDANCES OPTIONNELLES
# ===========================================
[project.optional-dependencies]

# Développement (tests, qualité, pre-commit)
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "httpx>=0.25.0",
    "pre-commit>=3.6.0",
]

# Notebooks & Visualisation
notebooks = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "jupyter>=1.0.0",
    "ipywidgets>=8.1.0",
]

# Tout pour le développement local
all = [
    "pl-betting-predictor[dev,notebooks]",
]

# ===========================================
# RUFF CONFIGURATION (Linter + Formatter)
# ===========================================
[tool.ruff]
# Version Python cible
target-version = "py311"

# Longueur maximale de ligne
line-length = 100

# Largeur d'indentation
indent-width = 4

# Dossiers à exclure
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "notebooks/.ipynb_checkpoints",
]

# ===========================================
# RUFF LINTING RULES
# ===========================================
[tool.ruff.lint]
# Règles activées
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "RET",    # flake8-return
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
]

# Règles ignorées
ignore = [
    "E501",   # Line too long (géré par le formatter)
    "B008",   # Do not perform function calls in argument defaults
    "ARG002", # Unused method argument
]

# Permettre l'auto-fix
fixable = ["ALL"]
unfixable = []

# Personnalisation par fichier
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Imports non utilisés OK dans __init__
"tests/*" = ["ARG001", "S101"]  # Unused args et assert OK dans tests

# ===========================================
# RUFF FORMATTING
# ===========================================
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

# ===========================================
# RUFF IMPORT SORTING (isort)
# ===========================================
[tool.ruff.lint.isort]
known-first-party = ["app", "etl", "models"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# ===========================================
# PYTEST CONFIGURATION
# ===========================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Options par défaut
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov=etl",
    "--cov=models",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=70",
]

# Markers personnalisés
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# ===========================================
# COVERAGE CONFIGURATION
# ===========================================
[tool.coverage.run]
source = ["app", "etl", "models"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# ===========================================
# MYPY CONFIGURATION
# ===========================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
strict_optional = false

exclude = [
    "venv/",
    ".venv/",
    "notebooks/",
]
